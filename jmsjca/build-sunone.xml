<?xml version="1.0"?>
<project default="compile" basedir="." name="jmsjca">
    <description>
    </description>

<!--
  Conventions:
  xx.dir = directory
  xx.filepath = absolute filename
  xx.filename = filename only

  This is the build file for stcms. It's targets will be called from
  other build files. It is assumed that the following properties are
  set:
  - jcaid

-->

<!--===========================================================================
    Initializes variables etc
-->
    <target name="init" unless="init.ed">
        <property environment="env" />
        <property file="${stc.root.dir}/stc.properties" />
        <pathconvert property="stc.root.dir" targetOS="unix">
            <path>
                <pathelement path="${env.STC_ROOT}"/>
            </path>
        </pathconvert>
        <property file="${env.STC_ROOT}/stc.properties" />
        <property file="${stc.root.dir}/stc.properties" />

        <property file="build.properties" />
        <property file="${env.STC_ROOT}/RTS/build.properties" />
        <property file="build-${jcaid}.properties" />
        <property file="build-xxx.properties" />

        <!-- To compile -->
        <path id="jmsjca.xxx.classpath">
            <fileset file="${stc.api.dir}/j2ee.jar" />
            <fileset file="${jmsjca.core.jar.path}" />
            <fileset file="${jcaid}/lib/imqjmsra.jar" />
        </path>

        <!-- To compile and run unit tests -->
        <path id="jmsjca.test.classpath">
            <path refid="container.classpath"/>
            <fileset file="core/test/lib/jdom.jar" />
            <fileset file="${jmsjca.core.jar.path}" />
            <fileset file="${jmsjca.xxx.rar.jar.path}" />
            <pathelement location="${jmsjca.container.classes.dir}" />

            <fileset file="${jcaid}/lib/imqjmsra.jar" />
            <fileset file="jndi/test/lib/fscontext.jar" />
            <fileset file="jndi/test/lib/providerutil.jar" />
        </path>

        <property name="init.ed" value="true" />
    </target>

<!--===========================================================================
    Clean
-->
    <target name="clean" depends="init">
        <echo message="deleting ${jmsjca.xxx.module.dir}" />
        <delete dir="${jmsjca.xxx.module.dir}" />
        <delete dir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}" />
        <delete file="${install.inclusions.dir}/all/extras/${jmsjca.xxx.rar.rar.path}" />
        <delete dir="${install.additions.dir}/all/${jmsjca.xxx.name}" />
    </target>

<!--===========================================================================
    Creates the rar file
-->
    <target name="rar" depends="compile" unless="rar.ed">
        <!-- Copy jars for upload into Repository (third party app servers) -->
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${jmsjca.artefacts.dir}" />

        <!-- Copy client jars and mgt jars for SAR upload -->
        <copy file="${jcaid}/lib/imqjmsra.jar" todir="${jmsjca.artefacts.dir}" failonerror="false" />
        <copy file="${stc.lib.dir}/com.stc.jmsmx.sjsmq.jar" todir="${jmsjca.artefacts.dir}" failonerror="false" />
        <copy file="${stc.api.dir}/com.stc.jmsmx.core.jar" todir="${jmsjca.artefacts.dir}" failonerror="false" />
        
        <property name="rar.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the sar file
-->
    <target name="sar" depends="rar" unless="sar.ed">
        <!-- This will modify domain.xml on installation -->
        <mkdir dir="${install.additions.dir}/all/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/scripts/init.xml" todir="${install.additions.dir}/all/${jmsjca.xxx.name}" />

        <!-- This will copy the provider jar and ra.xml to the correct place in the RTS zip file -->
        <mkdir dir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/meta/ra.xml"   todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />

        <!-- Copy to extras -->
        <mkdir dir="${install.inclusions.dir}/all/extras" />
        <copy file="${jmsjca.xxx.rar.rar.path}" todir="${install.inclusions.dir}/all/extras" />
        <copy file="${jcaid}/src/userdoc/ra${jcaid}-readme.html" todir="${install.inclusions.dir}/all/extras" />
        
        <property name="sar.ed" value="true" />
    </target>

<!--===========================================================================
    Compiles the source code and produces a jar file
-->
    <target
        name="compile"
        depends="init"
        description="Compiles the source base"
        unless="compile.ed"
    >
        <!-- compile -->
        <mkdir dir="${jmsjca.xxx.rar.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.rar.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="${jcaid}/src/java" />
            <classpath refid="jmsjca.xxx.classpath"/>
        </javac>

        <!-- mk rar -->
        <jar destfile="${jmsjca.xxx.rar.jar.path}">
            <fileset dir="${jmsjca.xxx.rar.classes.dir}">
                <include name="com/stc/jmsjca/${jcaid}/**.*" />
            </fileset>
        </jar>

        <zip destfile="${jmsjca.xxx.rar.rar.path}" >
            <fileset file="${jmsjca.xxx.rar.jar.path}" />
            <fileset file="${jmsjca.core.jar.path}" />
            <fileset file="${jcaid}/lib/imqjmsra.jar" />
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>

        <property name="compile.ed" value="true" />
    </target>


<!--===========================================================================
    DEV-ONLY: compile-test
-->
    <target
        name="compile-test"
        depends="init, compile"
        description=""
        unless="compile-test.ed"
    >
        <!-- compile test code -->
        <mkdir dir="${jmsjca.xxx.test.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.test.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="core/test/src/java" />
            <src path="${jcaid}/test/src/java" />
            <classpath refid="jmsjca.test.classpath"/>
        </javac>

        <!-- ejb -->
        <mkdir dir="${jmsjca.xxx.test.dir}"/>
        <jar destfile="${jmsjca.xxx.ejb.jar.path}">
            <fileset dir="${jmsjca.xxx.test.classes.dir}">
                <include name="com/stc/jmsjca/test/core/**.*" />
                <include name="com/stc/jmsjca/test/${jcaid}/**.*" />
            </fileset>
            <zipfileset prefix="META-INF" file="core/test/src/meta/ejb-jar.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ejb-jar.xml" />
        </jar>

        <!-- Generate manifests for embedded RARs -->
        <!-- When outside of RTS -->
        <manifest file="${jmsjca.xxx.test.mft.path}">
            <attribute 
                name="Class-Path" 
                value="${jmsjca.core.jar.name} ${jmsjca.xxx.jar.name} imqjmsra.jar com.stc.jmsmx.sjsmq.jar com.stc.jmsmx.core.jar"
            />
        </manifest>
        <copy file="${jmsjca.xxx.test.mft.path}" tofile="${jmsjca.xxx.test.mft1.path}" />

        <!-- make embedded rar -->
        <zip destfile="${jmsjca.xxx.test.rar.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft.path}"  />
        </zip>
        <zip destfile="${jmsjca.xxx.test.rar1.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft1.path}"  />
        </zip>

        <if>
            <equals arg1="${testcontainer.id}" arg2="rts" />
            <then>
                <!-- mk ear INSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1" >
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />
                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />
                </zip>
            </then>
            <else>
                <!-- mk ear OUTSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1">
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />
                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />

                    <!-- When outside of RTS -->
                    <zipfileset file="${jmsjca.core.jar.path}" />
                    <zipfileset file="${jmsjca.xxx.rar.jar.path}" />
                    <zipfileset file="${jcaid}/lib/imqjmsra.jar" />
                    <zipfileset file="${stc.lib.dir}/com.stc.jmsmx.sjsmq.jar" />
                    <zipfileset file="${stc.api.dir}/com.stc.jmsmx.core.jar" />
                </zip>
            </else>
        </if>
        <property name="compile-test.ed" value="true" />
    </target>

<!--===========================================================================
    DEV-ONLY: install-jms-jars: jms provider client jars
-->
    <target
        name="install-jms-jars"
        depends="init"
        if="lh"
    >
        <echo message="${jcaid} installed" />
    </target>

    <target
        name="uninstall-jms-jars"
        depends="init"
        if="lh"
    >
    </target>

<!--===========================================================================
    DEV-ONLY: run-test: executes the tests
-->
    <target
        name="run-test"
        depends="init, compile-test"
    >
        <!-- Test in Tomato -->
        <echo message="test ear: ${jmsjca.xxx.ear.path}" />
        <echo message="test container : ${testcontainer.id}" />
        <echo message="test container properties: ${testcontainer.properties}" />
        <echo message="test jms server properties: ${testjmsserver.properties}" />

        <junit
            printsummary="on"
            haltonerror="off"
            haltonfailure="off"
        >
            <jvmarg value="${junit.jvm.options}"/>
            <sysproperty key="test.container.id" value="${testcontainer.id}"/>
            <sysproperty key="test.server.properties" value="${testjmsserver.properties}"/>
            <sysproperty key="test.container.properties" value="${testcontainer.properties}"/>
            <sysproperty key="test.ear.path" value="${jmsjca.xxx.ear.path}"/>

            <classpath refid="jmsjca.test.classpath"/>
            <classpath  path="${jmsjca.xxx.test.classes.dir}" />

            <batchtest
                haltonfailure="no"
                haltonerror="no"
                todir="${jmsjca.reports.junit.dir}"
            >
                <fileset dir="${jmsjca.xxx.test.classes.dir}">
                    <include name="**/${jmsjca.ear1.pattern}JUStd.class"/>
                    <include name="**/${jmsjca.ear1.pattern}Ear1.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

<!--===========================================================================
    DEV-ONLY: Patches the server specified by "lh"
-->
    <target
        name="patch-core"
        depends="sar"
        if="lh"
    >
       <!-- Provider jar -->
       <copy
           file="${jmsjca.xxx.rar.jar.path}"
           todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
        <unzip
            src="${jmsjca.xxx.rar.jar.path}"
            dest="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
            
        <!-- ra.xml -->
        <copy
            file="${jcaid}/src/meta/ra.xml"
            todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}/META-INF"
        />
    </target>

<!--===========================================================================
    DEV-ONLY: run-test: executes the tests
-->
    <target
        name="bench"
        depends="init, compile-test"
    >
        <mkdir dir="${jmsjca.reports.junit.dir}" />

        <!-- Test in Tomato -->
        <junit
            printsummary="on"
            haltonerror="off"
            haltonfailure="off"
        >
            <jvmarg value="${junit.jvm.options}"/>
            <sysproperty key="test.server.properties" value="${settings.path}"/>
            <sysproperty key="test.ear.path" value="${jmsjca.xxx.ear.path}"/>

            <classpath refid="jmsjca.test.classpath"/>
            <classpath  path="${jmsjca.xxx.test.classes.dir}" />

            <batchtest
                haltonfailure="no"
                haltonerror="no"
                todir="${jmsjca.reports.junit.dir}"
            >
                <fileset dir="${jmsjca.xxx.test.classes.dir}">
                    <include name="**/*Perf1.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

<!--===========================================================================
    DEV-ONLY: do-loop
    To execute this test:
        ant invoke -Djcaid=stcms -Djcatarget=do-loop -Dloop.duration.minutes=2 -Dloop.nmsgs=50
    Note, to use proxymock:
        ant invoke -Djcaid=stcms -Djcatarget=do-loop -Dloop.duration.minutes=2 -Dloop.nmsgs=0 "-Dloop.url=stcms://?com.stc.jms.mock=true"
    or
        ant invoke -Djcaid=stcms -Djcatarget=do-loop -Dloop.duration.minutes=2 -Dloop.url=mock
    Concurrency can be set using loop.concurrency
    Endpoints can be set with loop.endpoints
-->
    <target
        name="do-loop"
        depends="init, compile-test"
    >
        <mkdir dir="${jmsjca.reports.junit.dir}" />

        <echo message="Invoking test for containerid=${testcontainer.id}, jcaid=${jcaid}"/>
        <echo message="testjmsserver.properties=${testjmsserver.properties}" />
        <echo message="testcontainer.properties=${testcontainer.properties}" />
        <junit
            printsummary="on"
            haltonerror="off"
            haltonfailure="off"
        >
            <jvmarg value="${junit.jvm.options}"/>

            <sysproperty key="test.container.id" value="${testcontainer.id}"/>
            <sysproperty key="test.server.properties" value="${testjmsserver.properties}"/>
            <sysproperty key="test.container.properties" value="${testcontainer.properties}"/>
            <sysproperty key="test.ear.path" value="${jmsjca.xxx.ear.path}"/>
            <sysproperty key="loop.duration.minutes" value="${loop.duration.minutes}" />
            <sysproperty key="loop.nmsgs" value="${loop.nmsgs}" />
            <sysproperty key="loop.url" value="${loop.url}" />
            <sysproperty key="loop.concurrency" value="${loop.concurrency}" />
            <sysproperty key="loop.endpoints" value="${loop.endpoints}" />

            <classpath refid="jmsjca.test.classpath"/>
            <classpath  path="${jmsjca.xxx.test.classes.dir}" />

            <batchtest
                haltonfailure="no"
                haltonerror="no"
                todir="${jmsjca.reports.junit.dir}"
            >
                <fileset dir="${jmsjca.xxx.test.classes.dir}">
                    <include name="**/*Loop.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <path id="jmsjca.junit.dir.display_x" location="${jmsjca.reports.junit.dir}\TEST-com.stc.jmsjca.test.stcms.Loop.xml" />
        <pathconvert targetos="windows" property="jmsjca.junit.dir.display" refid="jmsjca.junit.dir.display_x" />
        <echo message="type   start ${jmsjca.junit.dir.display}   to view the report" />
    </target>

</project>
