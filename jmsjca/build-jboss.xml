<?xml version="1.0"?>
<project default="" basedir="." name="jboss">
    <import file="build-common.xml" />
    <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="./buildtools/lib/ant-contrib.jar"/>
    <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="./buildtools/lib/ant-contrib.jar"/>

<!--===========================================================================
    Initializes variables etc
-->
    <target name="init" unless="init.ed">
        <!-- To compile/run unit tests -->
        <path id="jmsjca.test.classpath">
            <path refid="container.classpath"/>
            <fileset file="core/test/lib/jdom.jar" />
            <fileset file="${jmsjca.core.jar.path}" />
            <fileset file="${jmsjca.xxx.rar.jar.path}" />
            <pathelement location="${jmsjca.container.classes.dir}" />
            <fileset dir="${jcaid}/lib" />
        </path>

        <property name="init.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the rar file
-->
    <target name="rar" depends="init" unless="rar.ed">
        <!-- Build rar -->
        <zip destfile="${jmsjca.xxx.rar.rar.path}" >
            <fileset file="${jmsjca.xxx.rar.jar.path}" />
            <fileset file="${jmsjca.core.jar.path}" />
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>

        <!-- This will modify domain.xml on installation -->
        <mkdir dir="${install.additions.dir}/all/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/scripts/init.xml" todir="${install.additions.dir}/all/${jmsjca.xxx.name}" />

        <!-- This will copy the provider jar and ra.xml to the correct place in the RTS zip file -->
        <mkdir dir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/meta/ra.xml"   todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />

        <!-- Copy to extras -->
        <mkdir dir="${install.inclusions.dir}/all/extras" />
        <copy file="${jmsjca.xxx.rar.rar.path}" todir="${install.inclusions.dir}/all/extras" />
        <copy file="${jcaid}/src/userdoc/ra${jcaid}-readme.html" todir="${install.inclusions.dir}/all/extras" />

        <!-- Copy jars for upload into Repository (third party app servers) -->
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${jmsjca.artefacts.dir}" />

        <property name="rar.ed" value="true" />
    </target>

<!--===========================================================================
    DEV-ONLY: compile-test
-->
    <target
        name="compile-test"
        depends="init"
        description=""
        unless="compile-test.ed"
    >
        <!-- compile test code -->
        <mkdir dir="${jmsjca.xxx.test.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.test.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="core/test/src/java" />
            <src path="${jcaid}/test/src/java" />
            <classpath refid="jmsjca.test.classpath"/>
        </javac>
        <copy todir="${jmsjca.xxx.test.classes.dir}">
            <fileset dir="core/test/src/java" excludes="**/*.java"/>
            <fileset dir="${jcaid}/test/src/java" excludes="**/*.java"/>
        </copy>

        <!-- ejb -->
        <mkdir dir="${jmsjca.xxx.test.dir}"/>
        <jar destfile="${jmsjca.xxx.ejb.jar.path}">
            <fileset dir="${jmsjca.xxx.test.classes.dir}">
                <include name="com/stc/jmsjca/test/core/**.*" />
                <include name="com/stc/jmsjca/test/${jcaid}/**.*" />
            </fileset>
            <zipfileset prefix="META-INF" file="core/test/src/meta/ejb-jar.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ejb-jar.xml" />
        </jar>

        <!-- Generate manifests for embedded RARs -->
        <!-- When outside of RTS -->
        <manifest file="${jmsjca.xxx.test.mft.path}">
            <attribute 
                name="Class-Path" 
                value="${jmsjca.core.jar.name} ${jmsjca.xxx.jar.name}"
            />
        </manifest>
        <copy file="${jmsjca.xxx.test.mft.path}" tofile="${jmsjca.xxx.test.mft1.path}" />

        <!-- make embedded rar -->
        <zip destfile="${jmsjca.xxx.test.rar.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft.path}"  />
        </zip>
        <zip destfile="${jmsjca.xxx.test.rar1.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft1.path}"  />
        </zip>

        <if>
            <equals arg1="${containerid}" arg2="rts" />
            <then>
                <!-- mk ear INSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1">
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />

                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />
                </zip>
            </then>
            <else>
                <!-- mk ear OUTSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1">
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />
                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />

                    <!-- When outside of RTS -->
                    <zipfileset file="${jmsjca.core.jar.path}" />
                    <zipfileset file="${jmsjca.xxx.rar.jar.path}" />
                </zip>
            </else>
        </if>
        <property name="compile-test.ed" value="true" />
    </target>

<!--===========================================================================
    DEV-ONLY: install-jms-jars: jms provider client jars
-->
    <target
        name="install-jms-jars"
        depends="init"
        if="lh"
    >
       <!-- provider jars -->
       <copy todir="${lh}/logicalhost/is/lib" >
        <fileset dir="${jcaid}/lib" >
            <include name="jbossall-client.jar" />
            <include name="jboss-client.jar" />
            <include name="jbossmq-client.jar" />
            <include name="jnp-client.jar" />
        </fileset>
       </copy>                
       <echo message="intalled jbossall-client.jar" />
       <echo message="intalled jboss-client.jar" />
       <echo message="intalled jbossmq-client.jar.jar" />
       <echo message="intalled jnp-client.jar.jar" />       
       
    </target>

    <target
        name="uninstall-jms-jars"
        depends="init"
        if="lh"
    >
       <!-- Remove provider jars -->
       <delete>
        <fileset dir="${lh}/logicalhost/is/lib" >
            <include name="jbossall-client.jar" />
            <include name="jboss-client.jar" />
            <include name="jbossmq-client.jar" />
            <include name="jnp-client.jar" />
        </fileset>
       </delete>                
       <echo message="unintalled jbossall-client.jar" />
       <echo message="unintalled jboss-client.jar" />
       <echo message="unintalled jbossmq-client.jar.jar" />
       <echo message="unintalled jnp-client.jar.jar" />       
       
    </target>

<!--===========================================================================
    DEV-ONLY: run-test: executes the tests
-->
    <target
        name="run-test"
        depends="init, compile-test"
    >
        
        <junit
            printsummary="on"
            haltonerror="off"
            haltonfailure="off"
        >
            <sysproperty key="test.container.id" value="${testcontainer.id}"/>
            <sysproperty key="test.server.properties" value="${testjmsserver.properties}"/>
            <sysproperty key="test.container.properties" value="${testcontainer.properties}"/>
            <sysproperty key="test.ear.path" value="${jmsjca.xxx.ear.path}"/>
            <sysproperty key="jboss.url" value="${jmsjca.jboss.url}"/>

            <classpath refid="jmsjca.test.classpath"/>
            <classpath  path="${jmsjca.xxx.test.classes.dir}" />

            <batchtest
                haltonfailure="no"
                haltonerror="no"
                todir="${jmsjca.reports.junit.dir}"
            >
                <fileset dir="${jmsjca.xxx.test.classes.dir}">
                    <include name="**/*JUStd.class"/>
                    <include name="**/*Ear1.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

<!--===========================================================================
    DEV-ONLY: Patches the server specified by "lh"
-->
    <target
        name="patch-core"
        depends="sar"
        if="lh"
    >
       <!-- Provider jar -->
       <copy
           file="${jmsjca.xxx.rar.jar.path}"
           todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
        <unzip
            src="${jmsjca.xxx.rar.jar.path}"
            dest="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
            
        <!-- ra.xml -->
        <copy
            file="${jcaid}/src/meta/ra.xml"
            todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}/META-INF"
        />
    </target>
</project>
