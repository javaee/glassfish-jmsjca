<?xml version="1.0"?>
<project default="" basedir="." name="unifiedjms">
    <import file="build-common.xml" />
    <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="./buildtools/lib/ant-contrib.jar"/>
    <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="./buildtools/lib/ant-contrib.jar"/>

<!--===========================================================================
    Initializes variables etc
-->
    <target name="init" unless="init.ed">
        <!-- To compile/run unit tests -->
        <path id="jmsjca.test.classpath">
            <path refid="container.classpath"/>
            <fileset file="core/test/lib/jdom.jar" />
            <fileset file="${jmsjca.core.jar.path}" />
            <fileset file="${jmsjca.xxx.rar.jar.path}" />
            <pathelement location="${jmsjca.container.classes.dir}" />
            <fileset file="${stc.api.dir}/com.stc.jms.stcjms.jar" />
            <fileset file="${stc.api.dir}/com.stc.jms.stcqueueviewer.jar" />
        </path>

        <property name="init.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the rar file
-->
    <target name="rar" depends="init" unless="rar.ed">
        <!-- This will modify domain.xml on installation -->
        <mkdir dir="${install.additions.dir}/all/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/scripts/init.xml" todir="${install.additions.dir}/all/${jmsjca.xxx.name}" />

        <!-- This will copy the provider jar and ra.xml to the correct place in the RTS zip file -->
        <mkdir dir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}" />
        <copy file="${jcaid}/src/meta/ra.xml"   todir="${install.inclusions.dir}/all/is/lib/install/applications/${jmsjca.xxx.name}/META-INF" />

        <mkdir dir="${jmsjca.artefacts.dir}" />
        
        <!-- mk rar -->
        <zip destfile="${jmsjca.xxx.rar.rar.path}" >
            <!-- Include all jars -->
            <fileset dir="${jmsjca.artefacts.dir}">
                <include name="*.jar" />
                <exclude name="com.stc.jmsjca.ra*.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>

        <property name="rar.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the common rar file
-->
        <target name="urar" unless="urar.ed" depends="init">
            <!-- mk sun-jms-adapter.rar -->
            <zip destfile="${jmsjca.xxx.module.dir}/sun-jms-adapter.rar" >
                <!-- Include all jars -->
<!-- This is how it is supposed to be TODO                
                <fileset dir="${jmsjca.jars.dir}">
                    <include name="*.jar" />
                </fileset>
                <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
-->
                <fileset dir="${jmsjca.jars.dir}">
                    <include name="com.stc.jmsjca.core.jar" />
                </fileset>
                <fileset file="${jmsjca.xxx.rar.jar.path}"/>
                <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            </zip>

            <property name="urar.ed" value="true" />
        </target>

<!--===========================================================================
    Creates the sar file
-->
    <target name="sar" depends="rar" unless="sar.ed">
        <!-- Copy to extras -->
        <mkdir dir="${install.inclusions.dir}/all/extras" />
        <copy file="${jmsjca.xxx.rar.rar.path}" todir="${install.inclusions.dir}/all/extras" />
        <copy file="${jcaid}/src/userdoc/ra${jcaid}-readme.html" todir="${install.inclusions.dir}/all/extras" />

        <!-- Copy jars for upload into Repository (third party app servers) -->
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${jmsjca.artefacts.dir}" />
        
        <property name="sar.ed" value="true" />
    </target>
    
    <target name="copy-runtime-image" depends="init">
        <copy file="${jmsjca.xxx.module.dir}/sun-jms-adapter.rar" todir="${jmsjca.runtime-image.dir}" />
        <copy file="${jcaid}/src/scripts/server-init.xml" todir="${jmsjca.runtime-image.dir}" />
        <copy file="${jcaid}/src/userdoc/sun-jms-adapter-readme.html" todir="${jmsjca.runtime-image.dir}" />
        <mkdir dir="${jmsjca.runtime-doc.dir}"/>
        <copy file="${jcaid}/src/userdoc/sun-jms-adapter-readme.html" todir="${jmsjca.runtime-doc.dir}" />
    </target>
        
    <!--===========================================================================
    Compiles the source code and produces a jar file
        The only extra thing: adds all classes to the jar. This is wrong. Remove it.
TODO
    -->
    <target
        name="compilejar"
        depends="init"
        description="Compiles the source base"
        unless="compilejar.ed"
    >
        <!-- compile -->
        <mkdir dir="${jmsjca.xxx.rar.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.rar.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="${jcaid}/src/java" />
            <classpath refid="jmsjca.xxx.classpath"/>
        </javac>

        <!-- Before jar, update i18n properties file in src directory and copy it to the jar -->
        <taskdef name="i18n" classname="com.stc.i18ntools.TextExtractor" classpath="${jmsjca.build-tools.classes.dir}"/>
        <i18n dir="${jmsjca.xxx.rar.classes.dir}" file="${jcaid}/src/java/com/stc/jmsjca/${jcaid}/msgs.properties" prefixU="ra${jcaid}-" />
        <copy todir="${jmsjca.xxx.rar.classes.dir}">
            <fileset dir="${jcaid}/src/java" excludes="**/*.java"/>
        </copy>

        <!-- mk jar -->
        <jar destfile="${jmsjca.xxx.rar.jar.path}">
            <fileset dir="${jmsjca.xxx.rar.classes.dir}">
                <include name="com/stc/jmsjca/${jcaid}/**.*" />
            </fileset>

            <!-- OTHER JARS -->
            <fileset dir="${jmsjca.module.dir}/rajboss/classes">
                <include name="com/stc/jmsjca/jboss/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rajndi/classes">
                <include name="com/stc/jmsjca/jndi/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rastcms/classes">
                <include name="com/stc/jmsjca/stcms/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rastcms453/classes">
                <include name="com/stc/jmsjca/stcms453/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rasunone/classes">
                <include name="com/stc/jmsjca/sunone/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawave/classes">
                <include name="com/stc/jmsjca/wave/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawl/classes">
                <include name="com/stc/jmsjca/wl/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawmq/classes">
                <include name="com/stc/jmsjca/wmq/**.*" />
            </fileset>
        </jar>
        
        <!-- copy jar file -->
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${jmsjca.jars.dir}" />

        <property name="compilejar.ed" value="true" />
    </target>

<!--===========================================================================
    Copies the relevant files to the Maven staging area for the Maven repository
-->
    <target name="maven-stage" depends="init" >
        <!-- Copy jars -->
        <mkdir dir="${jmsjca.maven.artefacts.dir}/jars" />
        <copy todir="${jmsjca.maven.artefacts.dir}/jars">
            <fileset dir="${jmsjca.artefacts.dir}">
                <include name="com.stc.jmsjca.core.jar" />
                <include name="com.stc.jmsjca.rajboss.jar" />
                <include name="com.stc.jmsjca.rajndi.jar" />
                <include name="com.stc.jmsjca.rastcms.jar" />
                <include name="com.stc.jmsjca.rastcms453.jar" />
                <include name="com.stc.jmsjca.rasunone.jar" />
                <include name="com.stc.jmsjca.rawave.jar" />
                <include name="com.stc.jmsjca.rawl.jar" />
                <include name="com.stc.jmsjca.rawmq.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
        </copy>


        <!-- Create manifest for rar -->
        <mkdir dir="${jmsjca.maven.work.dir}/unifiedjms-mft" />
        <manifest file="${jmsjca.maven.work.dir}/unifiedjms-mft/MANIFEST.MF">
            <attribute 
                name="Class-Path" 
                value="com.stc.jmsjca.core.jar"
            />
        </manifest>

        <!-- Create rar -->
        <mkdir dir="${jmsjca.maven.artefacts.dir}/rars" />
        <zip destfile="${jmsjca.maven.artefacts.dir}/rars/raunifiedjms.rar" >
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="${jmsjca.maven.work.dir}/unifiedjms-mft/MANIFEST.MF" />
        </zip>

        <zip destfile="${jmsjca.maven.artefacts.dir}/rars/sun-jms-adapter.rar" >
            <fileset dir="${jmsjca.artefacts.dir}">
                <include name="com.stc.jmsjca.core.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>
        <!-- ===== JAVA.NET REPOSITORY ===== -->
        
        <taskdef resource="maven-repository-importer.properties">
            <classpath>
                <pathelement path="buildtools/lib/maven-repository-importer-1.2.jar" />
            </classpath>
        </taskdef>

        <delete dir="${jmsjca.maven.staging.dir}" />

        <maven-repository-importer destdir="${jmsjca.maven.staging.dir}" version="${jmsjca.maven.version}">
            <!-- RAR -->
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/rars/raunifiedjms.rar"  
                 pom="buildtools/pom/raunifiedjms.pom" 
                 srczip="${jmsjca.maven.artefacts.dir}/java-sources/jmsjca-${jmsjca.maven.version}.zip" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/rars/sun-jms-adapter.rar"  
                 pom="buildtools/pom/sun-jms-adapter.pom" 
             />
             <!-- INDIVIDUAL JARS -->
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.core.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.core.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rajboss.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rajboss.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rajndi.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rajndi.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rastcms.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rastcms.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rastcms453.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rastcms453.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rasunone.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rasunone.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.raunifiedjms.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.raunifiedjms.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawave.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawave.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawl.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawl.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawmq.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawmq.pom" 
             />
        </maven-repository-importer>
    </target>

<!--===========================================================================
    DEV-ONLY: compile-test
-->
    <target
        name="compile-test"
        depends="init"
        description=""
        unless="compile-test.ed"
    >
        <!-- compile test code -->
        <mkdir dir="${jmsjca.xxx.test.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.test.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="core/test/src/java" />
            <src path="${jcaid}/test/src/java" />
            <classpath refid="jmsjca.test.classpath"/>
        </javac>
        <copy todir="${jmsjca.xxx.test.classes.dir}">
            <fileset dir="core/test/src/java" excludes="**/*.java"/>
            <fileset dir="${jcaid}/test/src/java" excludes="**/*.java"/>
        </copy>

        <!-- ejb -->
        <mkdir dir="${jmsjca.xxx.test.dir}"/>
        <jar destfile="${jmsjca.xxx.ejb.jar.path}">
            <fileset dir="${jmsjca.xxx.test.classes.dir}">
                <include name="com/stc/jmsjca/test/core/**.*" />
                <include name="com/stc/jmsjca/test/${jcaid}/**.*" />
            </fileset>
            <zipfileset prefix="META-INF" file="core/test/src/meta/ejb-jar.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ejb-jar.xml" />
        </jar>

        <!-- Generate manifests for embedded RARs -->
        <!-- When outside of RTS -->
        <manifest file="${jmsjca.xxx.test.mft.path}">
            <attribute 
                name="Class-Path" 
                value="com.stc.jms.stcjms.jar com.stc.jms.stcqueueviewer.jar com.stc.jmsjca.raunifiedjms.jar com.stc.jmsjca.core.jar com.stc.jmsjca.rajboss.jar com.stc.jmsjca.rastcms.jar com.stc.jmsjca.rastcms453.jar com.stc.jmsjca.rasunone.jar com.stc.jmsjca.rawave.jar com.stc.jmsjca.rawl.jar com.stc.jmsjca.rawmq.jar com.stc.jmsmx.core.jar com.stc.jmsmx.sjsmq.jar com.stc.jmsmx.stcms.jar com.stc.jmsmx.wave.jar com.stc.wave.lwmsClient.jar com.stc.wave.mgmt.jar com.stc.wave.wave.jar imqjmsra.jar stcjms_453.jar"
            />
        </manifest>
        <copy file="${jmsjca.xxx.test.mft.path}" tofile="${jmsjca.xxx.test.mft1.path}" />

        <!-- make embedded rar -->
        <zip destfile="${jmsjca.xxx.test.rar.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft.path}"  />
        </zip>
        <zip destfile="${jmsjca.xxx.test.rar1.path}" >
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="core/test/src/meta/sun-ra.xml" />
            <zipfileset fullpath="META-INF/MANIFEST.MF" file="${jmsjca.xxx.test.mft1.path}"  />
        </zip>

        <if>
            <equals arg1="${testcontainer.id}" arg2="rts" />
            <then>
                <!-- mk ear INSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1">
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />
                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />
                </zip>
            </then>
            <else>
                <!-- mk ear OUTSIDE of RTS -->
                <zip destfile="${jmsjca.xxx.ear.path}.1">
                    <zipfileset file="${jmsjca.xxx.test.rar.path}" />
                    <zipfileset file="${jmsjca.xxx.test.rar1.path}" />
                    <zipfileset file="${jmsjca.xxx.ejb.jar.path}" />
                    <zipfileset prefix="META-INF" file="core/test/src/meta/application.xml" />

                    <!-- When outside of RTS -->
                    <zipfileset file="${jmsjca.xxx.rar.jar.path}" />
                    <zipfileset dir="${jmsjca.artefacts.dir}" >
                        <include name="*.jar" />
                    </zipfileset>
                </zip>
            </else>
        </if>
        <property name="compile-test.ed" value="true" />
    </target>

<!--===========================================================================
    DEV-ONLY: install-jms-jars: jms provider client jars
-->
    <target
        name="install-jms-jars"
        if="lh"
    >
    </target>

    <target
        name="uninstall-jms-jars"
        if="lh"
    >
    </target>

<!--===========================================================================
    DEV-ONLY: run-test: executes the tests
-->
    <target
        name="run-test"
        depends="init, compile-test"
    >
        <!-- Test in Tomato -->
        <echo message="test ear: ${jmsjca.xxx.ear.path}" />
        <echo message="test container : ${testcontainer.id}" />
        <echo message="test container properties: ${testcontainer.properties}" />
        <echo message="test jms server properties: ${testjmsserver.properties}" />

        <junit
            printsummary="on"
            haltonerror="off"
            haltonfailure="off"
        >
            <jvmarg value="${junit.jvm.options}"/>
            <sysproperty key="test.container.id" value="${testcontainer.id}"/>
            <sysproperty key="test.server.properties" value="${testjmsserver.properties}"/>
            <sysproperty key="test.container.properties" value="${testcontainer.properties}"/>
            <sysproperty key="test.ear.path" value="${jmsjca.xxx.ear.path}"/>

            <classpath refid="jmsjca.test.classpath"/>
            <classpath  path="${jmsjca.xxx.test.classes.dir}" />

            <batchtest
                haltonfailure="no"
                haltonerror="no"
                todir="${jmsjca.reports.junit.dir}"
            >
                <fileset dir="${jmsjca.xxx.test.classes.dir}">
                    <include name="**/${jmsjca.ear1.pattern}JUStd.class"/>
                    <include name="**/${jmsjca.ear1.pattern}Ear1.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

<!--===========================================================================
    DEV-ONLY: Patches the server specified by "lh"
-->
    <target
        name="patch-core"
        depends="sar"
        if="lh"
    >
        <!-- Provider jar -->
        <copy
            file="${jmsjca.xxx.rar.jar.path}"
            todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
        <unzip
            src="${jmsjca.xxx.rar.jar.path}"
            dest="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}"
        />
            
        <!-- ra.xml -->
        <copy
            file="${jcaid}/src/meta/ra.xml"
            todir="${lh}/logicalhost/is/lib/install/applications/${jmsjca.xxx.name}/META-INF"
        />
    </target>
</project>
