<?xml version="1.0"?>
<project default="" basedir="." name="unifiedjms">
    <import file="build-common.xml" />
    <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="./buildtools/lib/ant-contrib.jar"/>
    <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="./buildtools/lib/ant-contrib.jar"/>

    <property file="${jmsjca.properties.path}" />

    <!-- REQUIRED for compile test -->
    <path id="jmsjca.stcms.clientjars.path">
        <fileset file="${jmsjca.stcms.jar.path-com.stc.jms.stcjms.jar}" />
        <fileset file="${jmsjca.stcms.jar.path-com.stc.jms.stcqueueviewer.jar}" />
    </path>


<!--===========================================================================
    Initializes variables etc
-->
    <target name="init" unless="init.ed">
        <property name="init.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the rar file
-->
    <target name="rar" depends="init" unless="rar.ed">
        <mkdir dir="${jmsjca.jars.dir}" />
        
        <!-- mk rar -->
        <zip destfile="${jmsjca.xxx.rar.rar.path}" >
            <!-- Include all jars -->
            <fileset dir="${jmsjca.jars.dir}">
                <include name="*.jar" />
                <exclude name="com.stc.jmsjca.ra*.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>

        <property name="rar.ed" value="true" />
    </target>

<!--===========================================================================
    Creates the common rar file
-->
    <target name="urar" unless="urar.ed" depends="init">
        <!-- mk sun-jms-adapter.rar -->
        <zip destfile="${jmsjca.xxx.module.dir}/sun-jms-adapter.rar" >
            <!-- Include all jars -->
<!-- This is how it is supposed to be TODO                
                <fileset dir="${jmsjca.jars.dir}">
                    <include name="*.jar" />
                </fileset>
                <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
-->
            <fileset dir="${jmsjca.jars.dir}">
                <include name="com.stc.jmsjca.core.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>
        

        <path id="jmsjca.unified.display_x"
              location="${jmsjca.xxx.module.dir}/sun-jms-adapter.rar"
        />
        <pathconvert targetos="windows"
                     property="jmsjca.unified.display"
                     refid="jmsjca.unified.display_x"
        />
                    
        <echo message="${jmsjca.unified.display}"/>

        <property name="urar.ed" value="true" />
    </target>

    <!--===========================================================================
    Compiles the source code and produces a jar file
        The only extra thing: adds all classes to the jar. This is wrong. Remove it.
TODO
    -->
    <target
        name="compilejar"
        depends="init"
        description="Compiles the source base"
        unless="compilejar.ed"
    >
        <!-- compile -->
        <mkdir dir="${jmsjca.xxx.rar.classes.dir}"/>
        <javac
            fork="stc.jdk13.fork"
            destdir="${jmsjca.xxx.rar.classes.dir}"
            debug="true"
            deprecation="${stc.java.deprecation}"
            target="1.4"
            source="1.4"
        >
            <src path="${jcaid}/src/java" />
            <classpath refid="jmsjca.xxx.classpath"/>
        </javac>

        <!-- Before jar, update i18n properties file in src directory and copy it to the jar -->
        <taskdef name="i18n" classname="com.stc.i18ntools.TextExtractor" classpath="${jmsjca.build-tools.classes.dir}"/>
        <i18n dir="${jmsjca.xxx.rar.classes.dir}" file="${jcaid}/src/java/com/stc/jmsjca/${jcaid}/msgs.properties" prefixU="ra${jcaid}-" />
        <copy todir="${jmsjca.xxx.rar.classes.dir}">
            <fileset dir="${jcaid}/src/java" excludes="**/*.java"/>
        </copy>

        <!-- mk jar -->
        <jar destfile="${jmsjca.xxx.rar.jar.path}">
            <fileset dir="${jmsjca.xxx.rar.classes.dir}">
                <include name="com/stc/jmsjca/${jcaid}/**.*" />
            </fileset>

            <!-- OTHER JARS -->
            <fileset dir="${jmsjca.module.dir}/rajboss/classes">
                <include name="com/stc/jmsjca/jboss/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rajndi/classes">
                <include name="com/stc/jmsjca/jndi/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rastcms/classes">
                <include name="com/stc/jmsjca/stcms/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rastcms453/classes">
                <include name="com/stc/jmsjca/stcms453/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rasunone/classes">
                <include name="com/stc/jmsjca/sunone/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawave/classes">
                <include name="com/stc/jmsjca/wave/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawl/classes">
                <include name="com/stc/jmsjca/wl/**.*" />
            </fileset>
            <fileset dir="${jmsjca.module.dir}/rawmq/classes">
                <include name="com/stc/jmsjca/wmq/**.*" />
            </fileset>
        </jar>
        
        <!-- copy jar file -->
        <copy file="${jmsjca.xxx.rar.jar.path}" todir="${jmsjca.jars.dir}" />
    	
    	<!-- instrument jar for emma -->
        <path id="emma.jmsjca.xxx.rar.jar">
           <fileset file="${jmsjca.xxx.rar.jar.path}"/>
        </path>
        <emma enabled="${emma.enabled}" >
           <instr instrpathref="emma.jmsjca.xxx.rar.jar"
              destdir="${out.instr.dir}"	
              metadatafile="${coverage.dir}/metadata.emma"
              merge="true"
          />
        </emma>
    	
    	<if>
    	<equals arg1="${emma.enabled}" arg2="true" />
    	<then>
           <!-- Copy resources and any additional classes to the directory containing the instrumented classes (without overwriting existing files) -->
            <copy todir="${out.instr.dir}">
                <fileset dir="${jmsjca.xxx.rar.classes.dir}"/>
            </copy>
    	</then>
    	</if>     	
 	

        <property name="compilejar.ed" value="true" />
    </target>

<!--===========================================================================
    Copies the relevant files to the Maven staging area for the Maven repository
-->
    <target name="maven-stage" depends="init" >
        <!-- Copy jars -->
        <mkdir dir="${jmsjca.maven.artefacts.dir}/jars" />
        <copy todir="${jmsjca.maven.artefacts.dir}/jars">
            <fileset dir="${jmsjca.jars.dir}">
                <include name="com.stc.jmsjca.core.jar" />
                <include name="com.stc.jmsjca.rajboss.jar" />
                <include name="com.stc.jmsjca.rajndi.jar" />
                <include name="com.stc.jmsjca.rastcms.jar" />
                <include name="com.stc.jmsjca.rastcms453.jar" />
                <include name="com.stc.jmsjca.rasunone.jar" />
                <include name="com.stc.jmsjca.rawave.jar" />
                <include name="com.stc.jmsjca.rawl.jar" />
                <include name="com.stc.jmsjca.rawmq.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
        </copy>


        <!-- Create manifest for rar -->
        <mkdir dir="${jmsjca.maven.work.dir}/unifiedjms-mft" />
        <manifest file="${jmsjca.maven.work.dir}/unifiedjms-mft/MANIFEST.MF">
            <attribute 
                name="Class-Path" 
                value="com.stc.jmsjca.core.jar"
            />
        </manifest>

        <!-- Create rar -->
        <mkdir dir="${jmsjca.maven.artefacts.dir}/rars" />
        <zip destfile="${jmsjca.maven.artefacts.dir}/rars/raunifiedjms.rar" >
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
            <zipfileset prefix="META-INF" file="${jmsjca.maven.work.dir}/unifiedjms-mft/MANIFEST.MF" />
        </zip>

        <zip destfile="${jmsjca.maven.artefacts.dir}/rars/sun-jms-adapter.rar" >
            <fileset dir="${jmsjca.jars.dir}">
                <include name="com.stc.jmsjca.core.jar" />
            </fileset>
            <fileset file="${jmsjca.xxx.rar.jar.path}"/>
            <zipfileset prefix="META-INF" file="${jcaid}/src/meta/ra.xml" />
        </zip>
        
        <!-- ===== JAVA.NET REPOSITORY ===== -->
        <taskdef resource="maven-repository-importer.properties">
            <classpath>
                <pathelement path="buildtools/lib/maven-repository-importer-1.2.jar" />
            </classpath>
        </taskdef>

        <delete dir="${jmsjca.maven.staging.dir}" />

        <maven-repository-importer destdir="${jmsjca.maven.staging.dir}" version="${jmsjca.maven.version}">
            <!-- RAR -->
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/rars/raunifiedjms.rar"  
                 pom="buildtools/pom/raunifiedjms.pom" 
                 srczip="${jmsjca.maven.artefacts.dir}/java-sources/jmsjca-${jmsjca.maven.version}.zip" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/rars/sun-jms-adapter.rar"  
                 pom="buildtools/pom/sun-jms-adapter.pom" 
             />
             <!-- INDIVIDUAL JARS -->
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.core.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.core.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rajboss.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rajboss.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rajndi.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rajndi.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rastcms.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rastcms.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rastcms453.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rastcms453.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rasunone.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rasunone.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.raunifiedjms.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.raunifiedjms.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawave.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawave.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawl.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawl.pom" 
             />
            <artifact 
                 jar="${jmsjca.maven.artefacts.dir}/jars/com.stc.jmsjca.rawmq.jar"  
                 pom="buildtools/pom/com.stc.jmsjca.rawmq.pom" 
             />
        </maven-repository-importer>
        
        <echo message="Binaries produced in ${jmsjca.maven.staging.dir}"/>
    </target>
</project>
