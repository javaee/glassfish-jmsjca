<?xml version="1.0"?>
<project default="install" basedir="." name="jmsjca">
<description>
    To build JMSJCA:
    ================
    No external dependencies are required. Just run the default task, and the 
    rar will be created in the build directory.
    

    To test JMSJCA:
    ===============
    Tests for JMSJCA depend on (a) container classes and (b) JMS provider
    classes. For both (a) and (b), external jars need to be specified.
    These jars are not available on the Internet, and must come from 
    proprietary and machine dependent installations.
    The locations of these jars are specified in a single file: 
    jmsjca.properties. This file resides by default in the user home 
    directory (this can be overridden).
    
    First time use: use 
        ant init-config-file
    to create the jmsjca.properties file. Next, edit this file with a 
    text editor to specify the correct jar locations. Note that *only* the 
    jars and locations need to be specified of the container and JMS provider
    being used.
    
    To run tests, execute three targets:
    (a) the container (glassfish, wl, was, ...)
    (b) the jms provider (stcms, sunone, wl, wmq, ...)
    (c) the test target (test)
    Example:
        ant glassfish sunone test
    
</description>
    
<!--===========================================================================
    Task definitions
-->
    <taskdef name="if"
             classname="net.sf.antcontrib.logic.IfTask"
             classpath="./buildtools/lib/ant-contrib.jar"
    />
    <taskdef name="foreach"
             classname="net.sf.antcontrib.logic.ForEach"
             classpath="./buildtools/lib/ant-contrib.jar"
    />
    <taskdef name="propertycopy"
             classname="net.sf.antcontrib.property.PropertyCopy"
             classpath="./buildtools/lib/ant-contrib.jar"
    />
    <taskdef name="JUnitUpload"
             classname="com.stc.unittrack.ant.Upload"
             classpath="./core/test/lib/unittracktask.jar"
    />

<!--===========================================================================
    Initialization
-->
    <property file="build.properties" />
    
    <property name="jmsjca.properties.path" value="${user.home}/jmsjca.properties"/>
    <property file="${jmsjca.properties.path}" />
    
    <path id="jmsjca.core.classpath">
        <fileset file="${stc.api.dir}/j2ee.jar" />
    </path>

    <path id="jmsjca.glassfish.classpath">
        <fileset file="${jmsjca.glassfish.home.dir}/lib/appserv-deployment-client.jar" />
        <fileset file="${jmsjca.glassfish.home.dir}/lib/javaee.jar" />
        <fileset file="${jmsjca.glassfish.home.dir}/lib/appserv-rt.jar" />
        <fileset file="${jmsjca.glassfish.home.dir}/lib/appserv-ext.jar" />
        <fileset file="${jmsjca.glassfish.home.dir}/lib/jmxremote_optional.jar" />
    </path>

    <path id="jmsjca.jboss.classpath">
        <fileset file="${jmsjca.jboss.home.dir}/lib/jboss-jmx.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/xml-apis.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/xercesImpl.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/jnp-client.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/jboss-system.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/client/jbossall-client.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/jboss-client.jar" />
        <fileset file="${jmsjca.jboss.home.dir}/lib/jmx-invoker-adaptor-client.jar" />
    </path>
	
    <path id="emma.lib" >
        <pathelement location="${emma.dir}/emma.jar" />
        <pathelement location="${emma.dir}/emma_ant.jar" />
    </path>

    
<!--===========================================================================
    MAIN TARGET
-->
    <target name="install"
            depends="rar,urar"
            description="Main target: compiles, sars"
    />

<!--===========================================================================
    Resolves external dependencies
-->
    <target name="init-apis" unless="apis-init.ed">
        <mkdir dir="${stc.api.dir}" />
        <get src="${jmsjca.j2ee.url}"
             dest="${stc.api.dir}/j2ee.jar"
             verbose="true"
             usetimestamp="true"
        />
        <get src="${jmsjca.jdom.url}"
             dest="${stc.api.dir}/jdom.jar"
             verbose="true"
             usetimestamp="true"
        />
        <get src="${jmsjca.junit.url}"
             dest="${stc.api.dir}/junit.jar"
             verbose="true"
             usetimestamp="true"
        /> 	
    </target>
	
	<!-- Download the emma jars (anttaskdefs depend on them) -->
    <target name="init-emma" unless="emma-init.ed">
        <mkdir dir="${emma.dir}" />
        <get src="${jmsjca.emma.url}"
             dest="${emma.dir}/emma.jar"
             verbose="true"
             usetimestamp="true"
        />
        <get src="${jmsjca.emma_ant.url}"
             dest="${emma.dir}/emma_ant.jar"
             verbose="true"
             usetimestamp="true"
        />   	
    </target>	

    <target name="init" unless="init.ed">
        <available property="apis-init.ed" file="${stc.api.dir}/junit.jar" />
        <available property="emma-init.ed" file="${emma.dir}/emma_ant.jar" />
        <antcall target="init-apis" />
        <antcall target="init-emma" />
        <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
        <property name="init.ed" value="true" />
    </target>

<!--===========================================================================
    Clean
-->
    <target name="clean" depends="init">
        <delete dir="${jmsjca.module.dir}" />
        <foreach list="${jcaids}" target="call-clean" param="jcaid" />
    </target>

    <target name="call-clean">
        <fail unless="jcaid" message="missing parm jcaid" />
        <ant antfile="build-${jcaid}.xml" target="clean" inheritall="false">
            <property name="jcaid" value="${jcaid}" />
        </ant>
    </target>

<!--===========================================================================
    emma - enables the use of emma for a given ant run (specify this as the first target)
-->	
    <target name="emma" description="turns on EMMA instrumentation/reporting" >
        <property name="emma.enabled" value="true" />
        <!-- specify the directory used to hold instrumented classes -->
        <!-- It is important that this property exist only when emma.enabled=true -->
        <property name="out.instr.dir" value="${jmsjca.module.dir}/outinstr" />
        <mkdir dir="${out.instr.dir}" />
    </target>
	

<!--===========================================================================
    Creates the rar file
-->
    <target name="rar" depends="compile">
        <!-- Delegate rar-call to connectors -->
        <foreach list="${jcaids}" target="call-rar" param="jcaid" />
    </target>

    <target name="call-rar">
        <fail unless="jcaid" message="missing parm jcaid" />
        <ant antfile="build-${jcaid}.xml" target="rar" inheritall="false">
            <property name="jcaid" value="${jcaid}" />
        </ant>
    </target>

<!--===========================================================================
    Compiles the source code and produces a jar file
-->
    <target name="compile-core" depends="init" unless="compile-core.ed">
        <!-- Build tools -->
        <mkdir dir="${jmsjca.build-tools.classes.dir}" />
        <javac fork="stc.jdk13.fork"
               destdir="${jmsjca.build-tools.classes.dir}"
               debug="true"
               deprecation="${stc.java.deprecation}"
               target="1.4"
               source="1.4"
        >
            <src path="buildtools/src/java" />
            <classpath refid="jmsjca.core.classpath" />
        </javac>

        <!-- Build core -->
        <mkdir dir="${jmsjca.core.classes.dir}" />
        <javac fork="stc.jdk13.fork"
               destdir="${jmsjca.core.classes.dir}"
               debug="true"
               deprecation="${stc.java.deprecation}"
               target="1.4"
               source="1.4"
        >
            <src path="core/src/java" />
            <classpath refid="jmsjca.core.classpath" />
        </javac>

        <!-- Before jar, update i18n properties file in src directory and copy it to the jar -->
        <taskdef name="i18n"
                 classname="com.stc.i18ntools.TextExtractor"
                 classpath="${jmsjca.build-tools.classes.dir}"
        />
        <i18n dir="${jmsjca.core.classes.dir}"
              file="core/src/java/com/stc/jmsjca/localization/msgs.properties"
              prefix="JMSJCA-"
        />
        <copy todir="${jmsjca.core.classes.dir}">
            <fileset dir="core/src/java" excludes="**/*.java" />
        </copy>

        <!-- Build core jar -->
        <jar destfile="${jmsjca.core.jar.path}">
            <fileset dir="${jmsjca.core.classes.dir}">
            </fileset>
        </jar>

        <!-- copy jar file -->
        <mkdir dir="${jmsjca.jars.dir}" />
        <copy file="${jmsjca.core.jar.path}" todir="${jmsjca.jars.dir}" />
    	
    	
    	<!-- instrument core jar for emma -->
        <path id="emma.jmsjca.core.jar">
           <fileset file="${jmsjca.core.jar.path}"/>
        </path>
        <emma enabled="${emma.enabled}" >
            <instr instrpathref="emma.jmsjca.core.jar"
                destdir="${out.instr.dir}"	
                metadatafile="${coverage.dir}/metadata.emma"
                merge="true"
            />
        </emma>   	
    	
        <if>
            <equals arg1="${emma.enabled}" arg2="true" />
            <then>
            <!-- Copy resources and any additional classes to the directory containing 
            the instrumented classes (without overwriting existing files) -->
                <copy todir="${out.instr.dir}">
                    <fileset dir="${jmsjca.core.classes.dir}"/>
                </copy>
            </then>
        </if>
        
        <property name="compilecore.ed" value="true" />
    </target>

<!--===========================================================================
    Compiles the source code and produces a jar file
-->
    <target name="compile"
            depends="compile-core"
            description="Compiles the source base"
            unless="compile.ed"
    >
        <foreach list="${jcaids}" target="call-compile" param="jcaid" inheritall="true" />
        <property name="compile.ed" value="true" />
    </target>

    <target name="call-compile">
        <fail unless="jcaid" message="missing parm jcaid" />
        <ant antfile="build-${jcaid}.xml"
             target="compilejar"
             inheritall="false"
        >
            <property name="jcaid" value="${jcaid}" />
        	<property name="emma.enabled" value="${emma.enabled}" />
        	<property name="out.instr.dir" value="${out.instr.dir}" />
        </ant>
    </target>

<!--===========================================================================
    Compiles the source code and produces the unified rar file
-->
    <target name="urar"
            depends="compile"
            unless="urar.ed"
    >
        <ant antfile="build-unifiedjms.xml" target="urar" inheritall="false">
            <property name="jcaid" value="unifiedjms" />
        </ant>
        <property name="urar.ed" value="true" />
    </target>
    
<!--===========================================================================
    DEV-ONLY: Sets up a specific container container
-->
    <target name="glassfish" depends="check-config-file" description="Setups up this specific container">
        <fail if="jmsjca.container.id">$${jmsjca.container.id} already set to "${jmsjca.container.id}"</fail>
        <property name="jmsjca.container.id" value="glassfish" />
        <echo>Setting container to ${jmsjca.container.id}</echo>
        <antcall target="compile-a-container" />
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a specific container container
-->
    <target name="jboss" depends="check-config-file" description="Setups up this specific container">
        <fail if="jmsjca.container.id">$${jmsjca.container.id} already set to "${jmsjca.container.id}"</fail>
        <property name="jmsjca.container.id" value="jboss" />
        <echo>Setting container to ${jmsjca.container.id}</echo>
        <antcall target="compile-a-container" />
    </target>

<!--===========================================================================
    DEV-ONLY: Compiles all containers
-->
    <target name="all-containers" depends="check-config-file" description="Compiles all containers">
        <fail if="jmsjca.container.id">$${jmsjca.container.id} already set to "${jmsjca.container.id}"</fail>
        <foreach list="${jmsjca.containers.ids}" target="compile-a-container" param="jmsjca.container.id" />
    </target>

<!--===========================================================================
    DEV-ONLY: Compiles a specific container
-->    
    <target name="compile-a-container" depends="" >
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified</fail>
        
        <!-- Compile -->
        <mkdir dir="${jmsjca.container.classes.dir}" />
        <javac fork="stc.jdk13.fork"
               destdir="${jmsjca.container.classes.dir}"
               debug="true"
               deprecation="${stc.java.deprecation}"
               target="1.4"
               source="1.4"
        >
            <src path="container/src/java"/>
            <src path="container-${jmsjca.container.id}/src/java"/>
            <classpath refid="jmsjca.core.classpath" />
            <classpath refid="jmsjca.${jmsjca.container.id}.classpath" />
            <classpath>
                <fileset file="${stc.lib.dir}/jdom.jar" />
                <fileset file="${jmsjca.core.jar.path}" />
            </classpath>
        </javac>
    </target>

<!--===========================================================================
    DEV-ONLY: Checks that the config file was read
-->    
    <target name="check-config-file">
        <!-- Read properties -->
        <available property="jmsjca.properties.path.exists" file="${jmsjca.properties.path}" />
        <fail unless="jmsjca.properties.path.exists">
*** ERROR ***
            
*** The file ${jmsjca.properties.path} does not exist. 
*** It should contain the container and jms server configurations.
*** Call "ant init-config-file" to create this file.
*** Specify the property $${jmsjca.properties.path} to specify the location 
*** of the file.
        </fail>
    </target>
    
    <target name="init-config-file" description="Creates jmsjca.properties for you to edit">
        <available property="jmsjca.properties.path.exists"
                   file="${jmsjca.properties.path}"
        />
        <fail if="jmsjca.properties.path.exists">
*** ERROR ***
            
*** The file ${jmsjca.properties.path} already exists. 
*** Specify the property $${jmsjca.properties.path} to specify the location 
*** of the file.
        </fail>
        <copy file="sample-jmsjca.properties" tofile="${user.home}/jmsjca.properties" />
        <echo message="Now edit ${user.home}/jmsjca.properties" />
    </target>

<!--===========================================================================
    Compiles the tests for a specific JMS implementation
-->    
    <target name="compile-a-jmsimpl-test" depends="" >
        <fail unless="jmsjca.jmsimpl.id" >$${jmsjca.jmsimpl.id} needs to be specified: call a jmsimpl target first</fail>
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified: call a container target first</fail>
        
        <echo file="${jmsjca.module.dir}/${jmsjca.marker.filename}">
            This file should be in the classpath so that the tests can find the ear files
        </echo>

        <ant antfile="build-${jmsjca.jmsimpl.id}.xml"
             target="compile-test2"
             inheritall="false"
             inheritRefs="false"
        >
            <property name="jcaid" value="${jmsjca.jmsimpl.id}" />
            <property name="jmsjca.container.id" value="${jmsjca.container.id}" />
            <property name="jmsjca.properties.path" value="${jmsjca.properties.path}"/>
            <reference refid="jmsjca.${jmsjca.container.id}.classpath"/>
        </ant>
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a jms implementation to test
-->
    <target name="stcms" depends="check-config-file" description="Sets up this jms implementation to test">
        <property name="jmsjca.jmsimpl.id" value="stcms" />
        <echo>Setting jms implementation to ${jmsjca.jmsimpl.id}</echo>
        <antcall target="compile-a-jmsimpl-test" />
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a jms implementation to test
-->
    <target name="sunone" depends="check-config-file" description="Sets up this jms implementation to test">
        <property name="jmsjca.jmsimpl.id" value="sunone" />
        <echo>Setting jms implementation to ${jmsjca.jmsimpl.id}</echo>
        <antcall target="compile-a-jmsimpl-test" />
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a jms implementation to test
-->
    <target name="wmq" depends="check-config-file" description="Sets up this jms implementation to test">
        <property name="jmsjca.jmsimpl.id" value="wmq" />
        <echo>Setting jms implementation to ${jmsjca.jmsimpl.id}</echo>
        <antcall target="compile-a-jmsimpl-test" />
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a jms implementation to test
-->
    <target name="wl" depends="check-config-file" description="Sets up this jms implementation to test">
        <property name="jmsjca.jmsimpl.id" value="wl" />
        <echo>Setting jms implementation to ${jmsjca.jmsimpl.id}</echo>
        <antcall target="compile-a-jmsimpl-test" />
    </target>

<!--===========================================================================
    DEV-ONLY: Sets up a jms implementation to test
-->
    <target name="jndi" depends="check-config-file" description="Sets up this jms implementation to test">
        <property name="jmsjca.jmsimpl.id" value="jndi" />
        <echo>Setting jms implementation to ${jmsjca.jmsimpl.id}</echo>
        <antcall target="compile-a-jmsimpl-test" />
    </target>

<!--===========================================================================
    DEV-ONLY: Runs unit tests for a jms-impl and container
-->
    <target name="test" depends="check-config-file" description="Runs tests for the specified jmsimpl and container">
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified: call a container target first</fail>
        <fail unless="jmsjca.jmsimpl.id" >$${jmsjca.jmsimpl.id} needs to be specified: call a jmsimpl target first</fail>
        <ant antfile="build-${jmsjca.jmsimpl.id}.xml"
             target="run-test2"
             inheritall="false"
             inheritRefs="false"
        >
            <property name="jcaid" value="${jmsjca.jmsimpl.id}" />
            <property name="jmsjca.container.id" value="${jmsjca.container.id}" />
            <property name="jmsjca.properties.path" value="${jmsjca.properties.path}"/>
        	<reference refid="emma.lib"/>
        	<property name="out.instr.dir" value="${out.instr.dir}"/>
            <reference refid="jmsjca.${jmsjca.container.id}.classpath"/>
        </ant>
        
        <antcall target="report-test"/>
    </target>
    
<!--===========================================================================
    DEV-ONLY: report-test: generates a JUnit report
-->
    <target name="report-test">
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified: call a container target first</fail>
        <fail unless="jmsjca.jmsimpl.id" >$${jmsjca.jmsimpl.id} needs to be specified: call a jmsimpl target first</fail>

        <junitreport todir="${jmsjca.reports.junit.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}">
            <fileset dir="${jmsjca.reports.junit.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${jmsjca.reports.junit.html.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}" />
        </junitreport>

        <!-- Upload the report -->
<!--        <antcall target="publish-test-results" />-->

        <path id="jmsjca.junit.dir.display_x"
              location="${jmsjca.reports.junit.html.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}/index.html"
        />
        <pathconvert targetos="windows"
                     property="jmsjca.junit.dir.display"
                     refid="jmsjca.junit.dir.display_x"
        />
        <echo level="info">Note:
To view the junit report, type            
  start ${jmsjca.junit.dir.display}
or type 
  ant ${jmsjca.container.id} ${jmsjca.jmsimpl.id} view-report           
        </echo>            
    </target>

<!--===========================================================================
    DEV-ONLY: Uploads the test results to the server
-->
    <target name="publish-test-results" unless="nopublish" depends="init">
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified: call a container target first</fail>
        <fail unless="jmsjca.jmsimpl.id" >$${jmsjca.jmsimpl.id} needs to be specified: call a jmsimpl target first</fail>
        <JUnitUpload file="${jmsjca.reports.junit.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}/TESTS-TestSuites.xml"
                     prefix="${testcontainer.id}"
        />
    </target>

<!--===========================================================================
    DEV-ONLY: view-report
-->
    <target name="view-report"
            depends="init"
            description="views the junit report"
    >
        <fail unless="jmsjca.container.id" >$${jmsjca.container.id} needs to be specified: call a container target first</fail>
        <fail unless="jmsjca.jmsimpl.id" >$${jmsjca.jmsimpl.id} needs to be specified: call a jmsimpl target first</fail>
        <exec executable="cmd.exe" spawn="true">
            <arg line="/c start ${jmsjca.reports.junit.html.dir}/${jmsjca.jmsimpl.id}-${jmsjca.container.id}/index.html" />
        </exec>
    </target>


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
<!--===========================================================================
    DEV-ONLY: replace-headers: changes SeeBeyond headers to CDDL
-->
    <target name="replace-headers" depends="compile">
        <java classname="com.stc.jmsjca.util.ReplaceHeaders">
            <arg value="." />
            <classpath>
                <pathelement location="${jmsjca.core.jar.path}" />
            </classpath>
        </java>
    </target>

<!--===========================================================================
    DEV-ONLY: Stages all files for the Maven repository
-->
    <target name="maven-stage"
            description="Prepares for publishing to a maven repository"
            depends="init"
            unless="maven-stage.ed"
    >
        <!-- Copy the source tree -->
        <copy todir="${jmsjca.maven.work.dir}/src">
            <fileset dir=".">
                <exclude name="jboss/lib/**" />
                <exclude name="stcms453/lib/**" />
                <exclude name="wmq/lib/**" />
                <exclude name="wl/lib/**" />
                <exclude name="nsk/**" />
                <exclude name="sunone/test/lib/**" />
                <exclude name="sunone/lib/**" />
                <exclude name="jndi/test/lib/**" />
                <exclude name="core/test/lib/jdom.jar" />
                <exclude name="**/*.bak" />
                <exclude name="build/**" />
            </fileset>
        </copy>

        <!-- Replace headers -->
        <java classname="com.stc.jmsjca.util.ReplaceHeaders">
            <arg value="${jmsjca.maven.work.dir}/src" />
            <classpath>
                <pathelement location="${jmsjca.core.jar.path}" />
            </classpath>
        </java>

        <!-- Zip up sources -->
        <mkdir dir="${jmsjca.maven.artefacts.dir}/java-sources" />
        <zip destfile="${jmsjca.maven.artefacts.dir}/java-sources/jmsjca-${jmsjca.maven.version}.zip"
             basedir="${jmsjca.maven.work.dir}/src"
        />

        <!-- Grab binaries -->
        <ant antfile="build-unifiedjms.xml"
             target="maven-stage"
             inheritall="false"
        >
            <property name="jcaid" value="unifiedjms" />
        </ant>

        <property name="maven-stage.ed" value="true" />
    </target>

<!--===========================================================================
    DEV-ONLY: Publishes files to the Maven repository
-->
    <target name="maven-publish"
            depends="maven-stage"
    >
        <!-- 
        <copy todir="\\hermes\mavenrepository\com.stc.jmsjca">
            <fileset dir="${jmsjca.maven.artefacts.dir}">
            </fileset>
        </copy>
        -->

        <!-- import to java.net CVS-->
        <tstamp />
        <echo>importing to CVS...</echo>
        <cvs dest="${jmsjca.maven.staging.dir}">
            <commandline>
                <argument value="-d:pserver:${jmsjca.maven.username}@cvs.dev.java.net:/cvs"
                />
                <argument line="-z9 import -ko -W *.jar -kb -m" />
                <argument value="deploying new jars to the java.net maven repository"
                />
                <argument value="jmsjca/repo" />
                <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}"
                />
            </commandline>
        </cvs>
    </target>

<!--===========================================================================
    DEV-ONLY: Syncs Maven cvs
-->
    <target name="maven-sync"
            depends="maven-stage"
    >
        <!-- import to java.net CVS-->
        <tstamp />
        <echo>importing to CVS...</echo>
        <cvs dest="${jmsjca.maven.work.dir}/src">
            <commandline>
                <argument value="-d:pserver:${jmsjca.maven.username}@cvs.dev.java.net:/cvs"
                />
                <argument line="-z9 import -m" />
                <argument value="syncing cvs to" />
                <argument value="jmsjca/jmsjca" />
                <argument line="sources t${DSTAMP}${TSTAMP}" />
            </commandline>
        </cvs>
        <!-- workaround the name "core" which is ignored by default -->
        <cvs dest="${jmsjca.maven.work.dir}/src/core">
            <commandline>
                <argument value="-d:pserver:${jmsjca.maven.username}@cvs.dev.java.net:/cvs"
                />
                <argument line="-z9 import -I ! -I *.bak -I *.BAK -I CVS -I TAGS -m"
                />
                <argument value="syncing cvs to" />
                <argument value="jmsjca/jmsjca/core" />
                <argument line="sources t${DSTAMP}${TSTAMP}" />
            </commandline>
        </cvs>
    </target>
	
    <target name="emma-report" description="Generates an emma report">
        <!-- junit writes coverage.ec into module root directory -->
        <!-- application server should write *.ec into coverage directory -->
        <!-- currently source code is not used -->	
        <emma enabled="${emma.enabled}">	    	
            <report>
                <sourcepath>
                    <dirset dir="${module.root}" >
                        <include name="**/java" /> 
                    </dirset>
                </sourcepath>

                <fileset dir="${coverage.dir}" >
                    <include name="*.ec" />
                    <include name="*.emma" />
                </fileset>
                <txt outfile="${coverage.dir}/coverage.txt" />
                <html outfile="${coverage.dir}/coverage.html" />
            </report>
        </emma>
    </target>
</project>
